stages:
- stage: SetupK8s
  jobs:
  - job: DeployAKS
    displayName: Installing AKS clusters
    continueOnError: false
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2 # Use the Download Pipeline Artifact task
      displayName: 'Download artifact'
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
        artifactName: 'drop-$(tag)'

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 1.3.7

    - powershell: "$env:TF_LOG = \"DEBUG\"\ndir \"$(Pipeline.Workspace)\" \n"
      enabled: true

    - task: TerraformTaskV4@4
      displayName: 'Terraform : init'
      inputs:
        provider: 'azurerm'
        workingDirectory: '$(Pipeline.Workspace)'
        backendServiceArm: 'pisharp'
        backendAzureRmResourceGroupName: 'rg-terrastate-non-prod-ase'
        backendAzureRmStorageAccountName: 'stterrastatenonprodase'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: 'terraform.tfstate'

    - task: AzureCLI@2
      displayName: 'Install kubelogin on Windows'
      inputs:
        azureSubscription: 'pisharp'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: "# This script downloads kubelogin and puts it in a path for later access        \nmkdir -p .bin\naz aks install-cli --install-location .bin/kubectl  # install kubelogin        \n# get the credentials for the AKS cluster\naz aks get-credentials -n aks-pisharp-dev-ase -g rg-pisharp-dev-ase    \n$env:path += ';C:\\Users\\VssAdministrator\\.azure-kubelogin'\n#magic___^_^___line\n# convert the kubeconfig using the current session\nkubelogin convert-kubeconfig -l azurecli     \n#copy kubelogin executable to Windows directory, as then it will be in the path and available in subsequent tasks:\ncopy C:\\Users\\VssAdministrator\\.azure-kubelogin\\kubelogin.exe c:\\windows\n"
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        enabled: true

    - task: Kubernetes@1
      displayName: 'Get Cluster info'
      inputs:
        kubernetesServiceEndpoint: 'aks-pisharp-dev-ase'
        command: 'cluster-info'
        versionSpec: 1.27.3
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: Kubernetes@1
      displayName: 'Deploy Azure AD for RBAC'
      inputs:
        kubernetesServiceEndpoint: 'aks-pisharp-dev-ase'
        command: apply
        arguments: '-f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml'
        versionSpec: 1.27.3
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: Kubernetes@1
      displayName: 'Allowing MIC and AKS add-ons to access IMDS without being intercepted by NMI'
      inputs:
        kubernetesServiceEndpoint: 'aks-pisharp-dev-ase'
        command: apply
        arguments: '-f https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.7.0/deploy/infra/mic-exception.yaml'
        versionSpec: 1.27.3
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: Kubernetes@1
      displayName: 'Get All in AKS clusters'
      inputs:
        kubernetesServiceEndpoint: 'aks-pisharp-dev-ase'
        command: get
        arguments: all
        versionSpec: 1.27.3
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        outputFormat: wide

    - task: HelmInstaller@0
      displayName: 'Install Helm Chart'
      inputs:
        helmVersion: 3.7.2
        installKubectl: false

- stage: DeployFE

  jobs:
  - job: ReleaseFE
    displayName: Release FE
    continueOnError: false
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2 # Use the Download Pipeline Artifact task
      displayName: 'Download artifact'
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
        artifactName: 'drop-$(tag)'

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 1.3.7

    - powershell: "$env:TF_LOG = \"DEBUG\"\ndir \"$(Pipeline.Workspace)\" \n"
      enabled: true

    - task: TerraformTaskV4@4
      displayName: 'Terraform : init'
      inputs:
        provider: 'azurerm'
        workingDirectory: '$(Pipeline.Workspace)'
        backendServiceArm: 'pisharp'
        backendAzureRmResourceGroupName: 'rg-terrastate-non-prod-ase'
        backendAzureRmStorageAccountName: 'stterrastatenonprodase'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: 'terraform.tfstate'

